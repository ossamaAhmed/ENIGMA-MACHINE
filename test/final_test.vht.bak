-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- ***************************************************************************
-- This file contains a Vhdl test bench template that is freely editable to   
-- suit user's needs .Comments are provided in each section to help the user  
-- fill out necessary details.                                                
-- ***************************************************************************
-- Generated on "02/08/2016 14:28:45"
                                                            
-- Vhdl Test Bench template for design  :  g22_Enigma
-- 
-- Simulation tool : ModelSim-Altera (VHDL)
-- 

LIBRARY ieee;                                               
USE ieee.std_logic_1164.all;    
USE ieee.numeric_std.all;     
USE ieee.std_logic_arith.all;                        

ENTITY g22_Enigma_vhd_tst IS
END g22_Enigma_vhd_tst;
ARCHITECTURE g22_Enigma_arch OF g22_Enigma_vhd_tst IS
-- constants                                              
-- signals

SIGNAL key_press : STD_LOGIC := '0';
SIGNAL input : STD_LOGIC_VECTOR(4 DOWNTO 0);
SIGNAL clk :  STD_LOGIC:= '0';

SIGNAL reset : STD_LOGIC := '1';
SIGNAL output : STD_LOGIC_VECTOR(4 DOWNTO 0);

constant clock_period : time := 20 ns;    
                                           
COMPONENT g22_Enigma_Final
PORT
	(
		clk :  IN  STD_LOGIC;
		reset :  IN  STD_LOGIC;
		key_press :  IN  STD_LOGIC;
		input :  IN  STD_LOGIC_VECTOR(4 DOWNTO 0);
		output :  OUT  STD_LOGIC_VECTOR(4 DOWNTO 0)
	);
END COMPONENT;

BEGIN
	i1 : g22_Enigma_Final
	PORT MAP (
-- list connections between master ports and signals
	clk => clk,
	reset => reset,
	key_press => key_press,
	input => input,
	output => output
	
);
simulated_clock : process
   begin
      wait for clock_period/2; clk  <= not clk;
end process simulated_clock;

generate_test : PROCESS                                               
-- variable declarations                                     
BEGIN
		key_press <= '0';
		reset <= '1';
		input <= "00011"; --direction
		wait for 250 ns; reset  <= '0';
		wait for 100 ns; key_press  <= '0';
		wait for 200 ns; key_press  <= '1';
		--state 2 --reflector
		wait for 200 ns;
		input <= "00001";
		wait for 100 ns; key_press  <= '0';
		wait for 200 ns; key_press  <= '1';
	  	--state 3 --data
		wait for 200 ns;
		input <= "00000";
		wait for 100 ns; key_press  <= '0';
		wait for 200 ns; key_press  <= '1';
	  	--state 4 -- rotor 1
		wait for 200 ns;
		input <= "00001";
		wait for 100 ns; key_press  <= '0';
		wait for 200 ns; key_press  <= '1';
	  	--state 5 --rotor 2
		wait for 100 ns; key_press  <= '0';
		wait for 200 ns; key_press  <= '1';
	  	--state 6 --rotor 3
		wait for 100 ns; key_press  <= '0';
		wait for 200 ns; key_press  <= '1';
	  --state 7 --input
		wait for 200 ns;
	   input <= "00100";
		wait for 100 ns; key_press  <= '0';
		wait for 200 ns; key_press  <= '1';
		wait for 500 ns;
END PROCESS generate_test;                                                                                     
END g22_Enigma_arch;
